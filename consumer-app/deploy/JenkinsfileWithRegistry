pipeline {

    agent any

    environment {
        NGINX_IMAGE_NAME = "investor-service-nginx-image"
        PHP_IMAGE_NAME = "investor-service-php-fpm-image"
        NGINX_CONTAINER_NAME = "investor-webserver"
        PHP_CONTAINER_NAME = "investor-app"
        NETWORK_NAME = "archive-net"
        SUBNET = "172.3.0.0/16"
        HOST_DIR = "/home/shadikul/Documents/html/investor-service"
        CONTAINER_DIR = "/var/www/html/"
        HOST_PORT = "802"
        GIT_URI = "http://192.168.1.15/microfin-dev-next"
        GIT_BRANCH = "new-pipeline"
        REMOTE_SERVER="shadikul@192.168.26.145:$HOST_DIR"
        SERVER_CRED = "shadikul@192.168.26.145"
        GIT_CREDENTIAL_ID = "sadik-git-credentials"
        DOCKER_REGISTRY_IP = "192.168.26.73"
        DOCKER_REGISTRY_FOLDER_NAME = "sadik"
        DOCKER_REGISTRY_PORT = "5000"
        HOST_IP= "192.168.26.145"
   }

    stages {
        
        stage('Stage-1: Pull Project Form Git') {
            steps {
                script {
                    git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDENTIAL_ID}", url: "${GIT_URI}/investor-service"
                    echo("================================================")
                    echo "     Project Pulled From Git Successfully"
                    echo("================================================")
                }
            }
        }

        stage('Stage-2: Image Build') {
            steps {
                script {
                    sh '''
                        mv codes/.env.example codes/.env
                        docker build ${IS_CACHE} \
                            --build-arg APP_ENV=${APP_ENV} \
                            --build-arg APP_DEBUG=${APP_DEBUG} \
                            --build-arg DB_HOST=${DB_HOST} \
                            --build-arg DB_DATABASE=${DB_DATABASE} \
                            --build-arg DB_USERNAME=${DB_USERNAME} \
                            --build-arg DB_PASSWORD=${DB_PASSWORD} \
                            --build-arg REDIS_HOST=${REDIS_HOST} \
                            --build-arg REDIS_HOST1=${REDIS_HOST1} \
                            --build-arg REDIS_HOST2=${REDIS_HOST2} \
                            --build-arg REDIS_PASSWORD=${REDIS_PASSWORD} \
                            --build-arg REDIS_PASSWORD1=${REDIS_PASSWORD1} \
                            --build-arg REDIS_PASSWORD2=${REDIS_PASSWORD2} \
                            --build-arg REDIS_PORT1=${REDIS_PORT1} \
                            --build-arg RDS_TOKEN_DB=${RDS_TOKEN_DB} \
                            --build-arg RDS_AUTHORIZATION_DB=${RDS_AUTHORIZATION_DB} \
                            --build-arg RDS_USER_SESSION_DB=${RDS_USER_SESSION_DB} \
                            --build-arg RDS_CONFIGURATION_DB=${RDS_CONFIGURATION_DB} \
                            --build-arg RDS_BRANCH_DB=${RDS_BRANCH_DB} \
                            --build-arg RDS_HOLIDAY_DB=${RDS_HOLIDAY_DB} \
                            --build-arg RDS_BD_GEOLOCATION_DB=${RDS_BD_GEOLOCATION_DB} \
                            --build-arg RDS_OTHER_GEOLOCATION_DB=${RDS_OTHER_GEOLOCATION_DB} \
                            --build-arg RDS_MFI_DB=${RDS_MFI_DB} \
                            --build-arg API_URL1=${API_URL1} \
                            --build-arg API_URL2=${API_URL2} \
                            --build-arg REMOTE_SERVER1=${REMOTE_SERVER1} \
                            --build-arg REMOTE_SERVER2=${REMOTE_SERVER2} \
                            --build-arg AUTH_SEVICE=${AUTH_SEVICE} \
                            --build-arg USER_SEVICE=${USER_SEVICE} \
                            --build-arg CORE_SEVICE=${CORE_SEVICE} \
                            --build-arg SECURITY_IP=${SECURITY_IP} \
                            -t $PHP_IMAGE_NAME \
                            -f docker/app/app.Dockerfile .

                        docker build ${IS_CACHE} \
                            --build-arg HOST_IP=${HOST_IP} \
                            -t $NGINX_IMAGE_NAME \
                            -f docker/web/web.Dockerfile .
                    '''
                    echo("==========================================")
                    echo "       Images Built Successfully"
                    echo("==========================================")
                }
            }                       
        }
        
        stage('Stage-3: Image Tag and Push Into Registry'){
            steps{
                script{
                    sh '''
                        docker tag $PHP_IMAGE_NAME:latest $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$PHP_IMAGE_NAME:$IMAGE_VERSION
                        docker tag $NGINX_IMAGE_NAME:latest $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$NGINX_IMAGE_NAME:$IMAGE_VERSION
                        
                        docker push $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$PHP_IMAGE_NAME:$IMAGE_VERSION
                        docker push $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$NGINX_IMAGE_NAME:$IMAGE_VERSION
                    '''
                    echo("=======================================================")
                    echo "    Images Tagged & Pushed Into Registry Successfully"
                    echo("=======================================================")
                }
            }
        }

        stage('Stage-4: App Deployment') {
            steps {
                script {
                    sshagent(credentials: ['sadik-pc']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker pull $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$PHP_IMAGE_NAME:$IMAGE_VERSION"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker network create --subnet=$SUBNET $NETWORK_NAME || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker stop $PHP_CONTAINER_NAME || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker rm $PHP_CONTAINER_NAME || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker run -d \
                                -e HOST_IP=${HOST_IP} \
                                --name $PHP_CONTAINER_NAME \
                                --network $NETWORK_NAME \
                                -p 9001:9000 \
                                -v /var/www/html/vendor/ \
                                $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$PHP_IMAGE_NAME:$IMAGE_VERSION"
                        '''
                        }
                    echo("================================================")
                    echo "         App Deployed Successfully"
                    echo("================================================")
                }                       
            }
        }

        stage('Stage-5: Webserver Deployment') {
            steps {
                script {
                    sshagent(credentials: ['sadik-pc']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker pull $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$NGINX_IMAGE_NAME:$IMAGE_VERSION"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker stop $NGINX_CONTAINER_NAME || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker rm $NGINX_CONTAINER_NAME || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker run -d \
                                --name $NGINX_CONTAINER_NAME \
                                -p $HOST_PORT:80 \
                                --network=$NETWORK_NAME \
                                $DOCKER_REGISTRY_IP:$DOCKER_REGISTRY_PORT/$DOCKER_REGISTRY_FOLDER_NAME/$NGINX_IMAGE_NAME:$IMAGE_VERSION"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker exec -it $NGINX_CONTAINER_NAME php artisan migrate down || true"
                            ssh -o StrictHostKeyChecking=no $SERVER_CRED "docker exec -it $NGINX_CONTAINER_NAME php artisan migrate --force || true"
                        '''
                    }
                    echo("================================================")
                    echo "       Webserver Deployed Successfully"
                    echo("================================================")
                }                       
            }
        }
    }
}
